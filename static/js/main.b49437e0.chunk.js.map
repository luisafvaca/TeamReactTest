{"version":3,"sources":["Actions/getStoreData.js","Reducers/getStoreData.js","Reducers/index.js","Utils/configUtils.js","Components/Nav/Nav.js","Components/Products/Filter/Filter.js","Components/Products/ItemCard/ItemCard.js","Components/Products/ItemsView/ItemsView.js","Components/Products/Products.js","Components/Form/Form.js","Components/Contact/Contact.js","Components/NoContent/NoContent.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["STORE_REQUEST_SUCCESS","STORE_REQUEST_FAILURE","FILTERING","initRequestStore","type","successRequestStore","data","failureRequestStore","error","filtered","initialState","storeData","storeDataError","filteredItems","stats","show","hide","storeDataManage","state","arguments","length","undefined","action","Object","objectSpread","store","items","filter","item","categories","includes","reducers","combineReducers","formConfig","label","isRequired","errorText","placeholder","menuButtonsConf","btnName","to","disable","filterConf","hasDivider","icon","faListUl","faLaptop","faWrench","faFolder","Nav","map","idx","react_default","a","createElement","key","Link","className","tabs","this","configMenu","Component","Filter","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClickEvent","bind","assertThisInitialized","buildFilters","e","currentTarget","getAttribute","console","log","BrowserRouter","react_md_es","name","onClick","iconBefore","react_fontawesome_index_es","click","primaryText","connect","dispatch","ItemsCards","isList","concat","title","brand","alt","src","photo","description","stock","price","ItemsView","onType","target","setState","faThLarge","faTh","ItemCard_ItemCard","Products","Products_Filter_Filter","Products_ItemsView_ItemsView","Form","onChangeInput","config","required","onChange","onChangeEvent","contentField","buildFormFields","containFocus","aria-labelledby","raised","primary","Contact","Components_Form_Form","NoContent","id","faSadCry","App","getStore","prevProps","prevState","Components_Nav_Nav","Switch","Route","path","exact","component","Redirect","fetch","then","response","json","catch","Boolean","window","location","hostname","match","root","document","getElementById","createStore","Reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","Components_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b49437e0.chunk.js","sourcesContent":["export const STORE_REQUEST_INIT = \"STORE_REQUEST_INIT\";\r\nexport const STORE_REQUEST_SUCCESS = \"STORE_REQUEST_SUCCESS\";\r\nexport const STORE_REQUEST_FAILURE = \"STORE_REQUEST_FAILURE\";\r\nexport const FILTERING = \"FILTERING\";\r\n\r\nexport const initRequestStore = () => ({\r\n    type: STORE_REQUEST_INIT\r\n})\r\n\r\nexport const successRequestStore = (data) => ({\r\n    type: STORE_REQUEST_SUCCESS,\r\n    data\r\n})\r\n\r\nexport const failureRequestStore = (error) => ({\r\n    type: STORE_REQUEST_FAILURE,\r\n    error\r\n})\r\n\r\nexport const filtered = (data) => ({\r\n    type: FILTERING,\r\n    data\r\n})\r\n\r\nexport function getStoreData(dispatch){\r\n    return (dispatch) => {\r\n        dispatch(initRequestStore());\r\n        fetch('http://localhost:8000/store').then((response) => {\r\n            return response.json()\r\n        }).then((data) => {\r\n            dispatch(successRequestStore(data))\r\n        }).catch((error) => {\r\n            dispatch(failureRequestStore(error))\r\n        })\r\n    }\r\n}","import { \r\n    STORE_REQUEST_SUCCESS, \r\n    STORE_REQUEST_FAILURE,\r\n    FILTERING\r\n} from '../Actions/getStoreData';\r\n\r\nconst initialState = {\r\n    storeData: [],\r\n    storeDataError: {},\r\n    filteredItems: [],\r\n    stats: {\r\n        show: \"\",\r\n        hide: \"\"\r\n    }\r\n}\r\n\r\nfunction storeDataManage(state=initialState, action){\r\n    switch(action.type) {\r\n        case STORE_REQUEST_SUCCESS:\r\n            return {...state, storeData:action.data.store};\r\n        case STORE_REQUEST_FAILURE:\r\n            return {...state, storeDataError:action.error};\r\n        case FILTERING:\r\n            const items = state.storeData.filter(function(item){\r\n                if(STORE_REQUEST_SUCCESS && action.data === \"All\"){\r\n                   return item\r\n                }else if(item.categories.includes(action.data)){\r\n                   return item\r\n               }\r\n            });\r\n            const show = items.length;\r\n            const hide = state.storeData.length - items.length;\r\n           return {...state, filteredItems:items, stats: {show: show, hide: hide}}\r\n            \r\n        default: \r\n            return state; \r\n    }\r\n}\r\n\r\nexport default storeDataManage;","import { combineReducers } from \"redux\";\r\nimport store from './getStoreData';\r\n\r\nconst reducers = combineReducers({\r\n    store\r\n})\r\n\r\nexport default reducers;","import { faListUl, faLaptop, faWrench, faFolder } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport const formConfig = [\r\n    {\r\n        label: \"FirtsName\",\r\n        isRequired: true,\r\n        errorText: \"Please write down your first name\",\r\n        placeholder: \"Your name...\"\r\n    },{\r\n        label: \"LastName\",\r\n        isRequired: true,\r\n        errorText: \"Please write down your last name\",\r\n        placeholder: \"Your lastname...\"\r\n    },{\r\n        label: \"Email\",\r\n        isRequired: true,\r\n        errorText: \"Don’t forget to tell us what your email address is\",\r\n        placeholder: \"Your email address...\"\r\n    },{\r\n        label: \"Subject\",\r\n        isRequired: true,\r\n        errorText: \"Don’t forget to write something to use!\",\r\n        placeholder: \"Let us know your concerns!\",\r\n    }\r\n];\r\n\r\nexport const menuButtonsConf = [\r\n    {\r\n        btnName: \"Home\",\r\n        to: \"./\",\r\n        disable: \"true\"\r\n    },{\r\n        btnName: \"Products\",\r\n        to: \"./products\",\r\n        disable: \"false\"\r\n    },{\r\n        btnName: \"Clients\",\r\n        to: \"./clients\",\r\n        disable: \"true\"\r\n    },{\r\n        btnName: \"Contact\",\r\n        to: \"./contact\",\r\n        disable: \"false\"\r\n    }\r\n];\r\n\r\nexport const filterConf = [\r\n    {\r\n        label: \"All\",\r\n        hasDivider: true,\r\n        icon: faListUl\r\n    },{\r\n        label: \"Tech\",\r\n        hasDivider: false,\r\n        icon: faLaptop\r\n    },{\r\n        label: \"Services\",\r\n        hasDivider: false,\r\n        icon: faWrench\r\n    },{\r\n        label: \"Office\",\r\n        hasDivider: false,\r\n        icon: faFolder\r\n    },\r\n\r\n];","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { menuButtonsConf } from '../../Utils/configUtils';\r\n\r\nimport './Nav.css'\r\n\r\nclass Nav extends Component {\r\n    /**\r\n     * This method help to build a menu just with \r\n     * simple array config that contents the following keys:\r\n     * to: link to\r\n     * buttonName: item name\r\n     * @param {array} items config\r\n     *\r\n    */\r\n    configMenu(items){\r\n        return items.map(function(item, idx){\r\n            return(\r\n                <li key={idx}>\r\n                    <Link to={item.to}>\r\n                        <button className=\"nav-button\">{item.btnName}</button>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n    render(){\r\n        const tabs = this.configMenu(menuButtonsConf);\r\n        return(\r\n            <nav className=\"nav\">\r\n                <ul className=\"nav-item\">\r\n                    {tabs}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { filtered } from '../../../Actions/getStoreData';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { BrowserRouter  } from 'react-router-dom'\r\n\r\nimport { filterConf } from '../../../Utils/configUtils';\r\nimport { \r\n    List,\r\n    Paper,  \r\n    AccessibleFakeInkedButton, \r\n    Card, \r\n    Subheader,\r\n    Avatar,\r\n    IconSeparator,\r\n    Divider\r\n} from 'react-md';\r\n\r\nimport './Filter.css';\r\n\r\nclass Filter extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.onClickEvent = this.onClickEvent.bind(this);\r\n        this.buildFilters = this.buildFilters.bind(this)\r\n    }\r\n\r\n    onClickEvent(e){\r\n        const type = e.currentTarget.getAttribute('name');\r\n        this.props.filter(type);\r\n        \r\n        console.log(BrowserRouter, '-----------')\r\n    }\r\n    /**\r\n     * Event Click to filter cards\r\n     * @param {func} onClickEvent handler filter\r\n     *\r\n    */\r\n    buildFilters(onClickEvent){\r\n        return filterConf.map(function(item, idx){\r\n            return(\r\n                <List key={idx}>\r\n                    <li>\r\n                        <AccessibleFakeInkedButton className=\"filter-icon\" name={item.label} onClick={(e)=>onClickEvent(e)}>\r\n                        <IconSeparator\r\n                            label={(\r\n                            <div>\r\n                                <p className=\"md-text\">{item.label}</p>\r\n                            </div> \r\n                            )}\r\n                            iconBefore\r\n                        >\r\n                            <Avatar icon={<FontAwesomeIcon icon={item.icon}></FontAwesomeIcon>}/>\r\n                        </IconSeparator>\r\n                        </AccessibleFakeInkedButton>\r\n                    </li>\r\n                    {item.hasDivider ? <Divider></Divider>: null}\r\n                </List>\r\n            )\r\n        })\r\n    }\r\n    render(){\r\n        const click = this.onClickEvent;\r\n        const items = this.buildFilters(click);\r\n\r\n        return(\r\n            <Card className=\"md-cell md-paper products-filter\">\r\n                <Subheader primaryText={\"Categories\"}/>\r\n                <Paper className=\"main-example\">\r\n                    <List>\r\n                       {items}\r\n                    </List>\r\n                </Paper>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\nreturn {\r\n    dispatch,\r\n    filter: (type) => dispatch(filtered(type))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport { Card, Subheader, CardTitle, CardText} from 'react-md';\r\n\r\nimport './ItemCard.css'\r\n\r\n/**\r\n * Event Click to buil an item card \r\n * @param {Object} function buil cards\r\n *\r\n*/\r\nconst ItemsCards = (props) => {\r\n    const items = props.items;\r\n    const isList = props.isList ? \"items-cards--list\" : \"items-cards--block\";\r\n    return items.map(function(item, idx){\r\n        return(\r\n            <Card key={idx} className={`items-cards ${isList}`}>\r\n                <CardTitle title={item.name}></CardTitle >\r\n                <Subheader primaryText={item.brand}></Subheader>\r\n                <div className=\"items-cards-cont\">\r\n                    <div>\r\n                        <img className=\"items-cards-image\"alt=\"item\" src={item.photo}></img>   \r\n                    </div>   \r\n                    <div>\r\n                        <CardText>{item.description}</CardText>\r\n                        <div className=\"items-cards-stock\">\r\n                            <div>{`Stock: $${item.stock}`}</div>\r\n                            <div>{`Price: $${item.price}`}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        )\r\n    })\r\n}\r\n\r\nexport default ItemsCards;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Grid } from 'react-md';\r\n\r\nimport ItemsCards from '../ItemCard/ItemCard';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faThLarge, faTh } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './ItemsView.css';\r\n\r\nclass ItemsView extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isList: true\r\n        }\r\n        this.onType = this.onType.bind(this);\r\n    }\r\n\r\n    onType(e){\r\n        const type = e.target.getAttribute(\"name\") !== \"list\" ? false : true;\r\n        this.setState({isList: type})\r\n    }\r\n\r\n    render(){\r\n        const items = this.props.items;\r\n        return(\r\n            <div className=\"items-view\">\r\n                <div className=\"item-view-icons\">\r\n                    <div className=\"items-view-buttons\">\r\n                        <button className=\"items-view-button\" name=\"list\" onClick={this.onType}> </button>\r\n                        <FontAwesomeIcon className=\"items-view-icon\" icon={faThLarge} />\r\n                    </div>\r\n                    <div className=\"items-view-buttons\">\r\n                        <button className=\"items-view-button\" name=\"block\" onClick={this.onType}> </button>\r\n                        <FontAwesomeIcon className=\"items-view-icon\" icon={faTh} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"items-view-stats\">\r\n                    Showing: <span className=\"items-view-stats-text--bold\">{this.props.stats.show}</span> products - Hidden <span className=\"items-view-stats-text--bold\">{this.props.stats.hide}</span>\r\n                </div>\r\n                <Grid>\r\n                    <ItemsCards items={items} isList={this.state.isList}/>\r\n                </Grid>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {  \r\n    return {\r\n        items: state.store.filteredItems,\r\n        stats: state.store.stats\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(ItemsView)","import React, { Component } from 'react';\r\nimport Filter from './Filter/Filter';\r\nimport ItemsView from './ItemsView/ItemsView';\r\n\r\nimport './Products.css';\r\n\r\nclass Products extends Component {\r\n    render(){\r\n        return(\r\n            <section className=\"products-container\">\r\n                <Filter></Filter>\r\n                <ItemsView></ItemsView>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Products","import React, {Component} from 'react';\r\nimport { TextField, Dialog, CardActions, Button } from 'react-md';\r\nimport { formConfig } from '../../Utils/configUtils';\r\n\r\nimport './Form.css'\r\n\r\nclass Form extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.onChangeInput = this.onChangeInput.bind(this)\r\n    }\r\n\r\n    onChangeInput(e, name){\r\n        console.log(e, name)\r\n    }\r\n\r\n    buildFormFields(config, onClick){\r\n        return config.map(function(item){\r\n            const name = item.label;\r\n            return(\r\n                <TextField \r\n                    errorText={item.errorText} \r\n                    required={item.isRequired} \r\n                    label={item.label} \r\n                    placeholder={item.placeholder} \r\n                    className=\"md-cell md-cell--bottom form-item\"\r\n                    onChange={(e)=>onClick(e, name)} \r\n                />\r\n            )\r\n        })\r\n    }\r\n    render(){\r\n        const onChangeEvent = this.onChangeInput;\r\n        const contentField = this.buildFormFields(formConfig, onChangeEvent);\r\n        return(\r\n            <Dialog containFocus={false} aria-labelledby=\"static-dialog-title\" className=\"md-background--card form\">\r\n                <form className=\"md-grid\">\r\n                    {contentField}\r\n                    <CardActions className=\"md-cell md-cell--12\">\r\n                        <Button raised primary type=\"submit\" className=\"md-cell--right\">Submit</Button>\r\n                    </CardActions>\r\n                </form>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Form from '../Form/Form';\r\n\r\nimport \"./Contact.css\";\r\n\r\nclass Contact extends Component {\r\n    render(){\r\n        return(\r\n            <section className=\"contact\">\r\n                <Form />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact","import React from 'react';\r\nimport { Dialog } from 'react-md';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSadCry } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './NoContent.css';\r\n\r\nconst NoContent = () =>{\r\n    return(\r\n        <section className=\"no-content\">\r\n            <Dialog containFocus={false} aria-labelledby=\"static-dialog-title\" className=\"md-background--card\">\r\n                <h1 id=\"static-dialog-title\">Hello!</h1>\r\n                <p>We are sorry, no content for now</p>\r\n                <FontAwesomeIcon icon={faSadCry} className=\"bookmark\"></FontAwesomeIcon>\r\n            </Dialog>   \r\n        </section>\r\n    )\r\n}\r\n\r\nexport default NoContent;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getStoreData, filtered } from '../../Actions/getStoreData';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\r\n\r\nimport Nav from '../Nav/Nav';\r\nimport Products from '../Products/Products';\r\nimport Contact from '../Contact/Contact';\r\nimport NoContent from '../NoContent/NoContent';\r\n\r\nconst initialType = \"All\";\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount(){\r\n    this.props.getStore()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(prevProps.store.storeData !== this.props.store.storeData){\r\n      this.props.filter(initialType)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Nav></Nav>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={NoContent}>\r\n              <Redirect to=\"/\" exact component={NoContent} />\r\n            </Route>\r\n            <Route path=\"/products\" component={Products}></Route>\r\n            <Route path=\"/contact\" component={Contact}></Route>\r\n            <Route path=\"/clients\" component={NoContent}></Route> \r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    store: state.store\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatch,\r\n    getStore: () => dispatch(getStoreData()),\r\n    filter: (type) => dispatch(filtered(type))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport Reducers from './Reducers/index';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst root =  document.getElementById('root');\r\nconst store = createStore(Reducers, composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n));\r\n\r\nReactDOM.render( \r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, root\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}